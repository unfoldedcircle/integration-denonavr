# GitHub Action to build a self-contained binary of the Denon AVR Python driver
---
name: "Build & Release"

on:
  workflow_dispatch:
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+*
#   pull_request:
#     branches:
#       - main
#     types: [ opened, synchronize, reopened ]

env:
  INTG_NAME: denonavr
  HASH_FILENAME: uc-intg-denonavr.hash
  INTG_LIB_VER: 0.1.0
  # Python version to use in the builder image. See https://hub.docker.com/r/arm64v8/python for possible versions.
  PYTHON_VER: 3.10.13

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      # We need the integration library, this is temporary until we decide to publish it to pypi  
      - name: Clone integrations library
        shell: bash
        run: |
          git clone --depth 1 --branch v${INTG_LIB_VER} https://martonborzak:${{ secrets.PAT }}@github.com/aitatoi/integration-python-library.git
          ls -lah

      - name: Prepare
        run: |
          sudo apt-get update && sudo apt-get install -y qemu binfmt-support qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          # do NOT update the Debian image! Bookworm contains a newer libc which is not available on UCR2
          docker run --name builder --platform=aarch64 -v ${GITHUB_WORKSPACE}:/io -d arm64v8/python:${PYTHON_VER}-bullseye tail -f /dev/null
          
          echo "Building and installing integration-python-library"
          docker exec builder bash -c "cd /io/integration-python-library && python3 setup.py bdist_wheel && python3 -m pip install -I dist/ucapi-${INTG_LIB_VER}-py3-none-any.whl"
          echo "Installing pyinstaller"
          docker exec builder bash -c "python -m pip install pyinstaller -r /io/requirements.txt"
          echo "Running pyinstaller"
          docker exec builder bash -c "cd /io && pyinstaller --clean --onefile --name intg-denonavr intg-denonavr/driver.py"

      - name: Fetch all tags to determine version
        run: |
          git fetch origin +refs/tags/*:refs/tags/*
          echo "VERSION=$(git describe --match "v[0-9]*" --tags HEAD --always)" >> $GITHUB_ENV
          
      - name: Add version
        run: |
          mkdir -p artifacts
          cd artifacts
          echo ${{ env.VERSION }} > version.txt
          
      - name: Prepare artifacts
        shell: bash
        run: |
          cp dist/intg-denonavr artifacts/
          cp driver.json artifacts/
          echo "ARTIFACT_NAME=uc-intg-${{ env.INTG_NAME }}-${{ env.VERSION }}-aarch64" >> $GITHUB_ENV
          
      - name: Create upload artifact
        shell: bash
        run: | 
          tar czvf ${{ env.ARTIFACT_NAME }}.tar.gz -C ${GITHUB_WORKSPACE}/artifacts .
          ls -lah
          
      - uses: actions/upload-artifact@v3
        id: upload_artifact
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_NAME }}.tar.gz
          if-no-files-found: error
          retention-days: 3
            
  release:
    name: Create Release
    if: github.ref == 'refs/heads/main' || contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3

      - name: Extract build archives from downloaded files
        run: |
          ls -R
          # extract tar.gz build archives from downloaded artifacts
          # (wrapped in tar from actions/upload-artifact, then extracted into a directory by actions/download-artifact)
          for D in * 
            do if [ -d "${D}" ]; then
              mv $D/* ./
            fi
          done;

      # Use a common timestamp for all matrix build artifacts
      - name: Get timestamp
        run: |
          echo "TIMESTAMP=$(date +"%Y%m%d_%H%M%S")" >> $GITHUB_ENV

      # Add timestamp to development builds
      - name: Create GitHub development build archives
        if: "!contains(github.ref, 'tags/v')"
        run: |
          # append timestamp
          for filename in *.tar.gz; do mv $filename "$(basename $filename .tar.gz)-${{ env.TIMESTAMP }}.tar.gz"; done;
          for filename in *.tar.gz; do echo "sha256  `sha256sum $filename`" >> ${{ env.HASH_FILENAME }}; done;

      - name: Create Pre-Release
        uses: "marvinpinto/action-automatic-releases@latest"
        if: "!contains(github.ref, 'tags/v')"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: true
          title: "Development Build"
          files: |
            *.tar.gz
            ${{ env.HASH_FILENAME }}

      - name: Create GitHub release archives
        if: "contains(github.ref, 'tags/v')"
        run: |
          for filename in *.tar.gz; do echo "sha256  `sha256sum $filename`" >> ${{ env.HASH_FILENAME }}; done;

      - name: Create Release
        uses: "marvinpinto/action-automatic-releases@latest"
        if: "contains(github.ref, 'tags/v')"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          files: |
            *.tar.gz
            ${{ env.HASH_FILENAME }}            
